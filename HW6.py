import gmpy2

gmpy2.get_context().precision = 1100

def factor1(num):
	
	A = gmpy2.ceil(gmpy2.sqrt(num))
	x = gmpy2.sqrt(A ** 2 - num)
	
	p = gmpy2.sub(A, x)
	q = gmpy2.add(A, x)

	assert num == gmpy2.mul(p, q)

	print "p    :", int(p)
	print "q    :", int(q)
	print "p<q  :", p < q
	
	return
	
def factor2(num):

	A = int(gmpy2.ceil(gmpy2.sqrt(num)))
	A_max = int(gmpy2.ceil(gmpy2.sqrt(num))+ (2 ** 20))
	
	print "A_max:", A_max
	print "A	:", A
	
	while A <= A_max:
		x = gmpy2.sqrt(A ** 2 - num)
		p = gmpy2.ceil(gmpy2.sub(A, x))
		q = gmpy2.ceil(gmpy2.add(A, x))
		if gmpy2.mul(p,q)==num:
			print "found! A:", A
			break
		A = A+1

	assert num == gmpy2.mul(p, q)

	print "p*q  :", p*q
	print "N    :", num
	print "p    :", p
	print "q    :", q
	print "p<q  :", p < q

	return	
	
def decrypt(msg, p,q,e,N):
	"""docstring for decrypt"""
	phi_n = (p-1) * (q-1)
	d = gmpy2.invert(e,phi_n)
	print "d	:", d
	decrypted = str(hex(gmpy2.powmod(msg,d,N)))

	print "msg:	", decrypted, len(decrypted)



def main():
	"""docstring for main"""
	# N1 = 179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581L
	# factor1(N1) 
	
	N2 = 648455842808071669662824265346772278726343720706976263060439070378797308618081116462714015276061417569195587321840254520655424906719892428844841839353281972988531310511738648965962582821502504990264452100885281673303711142296421027840289307657458645233683357077834689715838646088239640236866252211790085787877L
	factor2(N2)
	
	# p = 13407807929942597099574024998205846127479365820592393377723561443721764030073662768891111614362326998675040546094339320838419523375986027530441562135724301L
	# q = 13407807929942597099574024998205846127479365820592393377723561443721764030073778560980348930557750569660049234002192590823085163940025485114449475265364281L
	# e = 65537
	# ctext = 22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540L
	# decrypt(ctext,p,q,e,N1)
	
if __name__ == '__main__':
	main()